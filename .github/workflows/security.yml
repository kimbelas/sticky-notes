name: Security Scanning

on:
  # Run security scans daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      scan_level:
        description: 'Security scan level'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - comprehensive
  
  # Run on main branch pushes
  push:
    branches: [main]
    paths:
      - 'package*.json'
      - '.github/workflows/security.yml'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run npm audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level moderate --json > audit-results.json || true
          cat audit-results.json
      
      - name: Run audit-ci
        run: npm run security:audit-ci
      
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: audit-results.json

  code-security-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run security linting
        run: npm run lint:security
      
      - name: Run ESLint security plugin
        run: |
          npx eslint . --ext .js,.jsx,.ts,.tsx \
            --config .eslintrc.security.js \
            --format json \
            --output-file eslint-security-results.json || true
      
      - name: Upload security lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-security-results
          path: eslint-security-results.json

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      matrix:
        language: ['javascript']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Build for CodeQL
        run: npm run build
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning
      
      - name: Run TruffleHog OSS
        uses: trufflesecurity/truffleHog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  dockerfile-scan:
    name: Dockerfile Security Scan
    runs-on: ubuntu-latest
    if: ${{ hashFiles('Dockerfile*') != '' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
      
      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif

  comprehensive-scan:
    name: Comprehensive Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_level == 'comprehensive' || github.event_name == 'schedule' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Install security scanning tools
        run: |
          npm install -g retire
          npm install -g @cyclonedx/cyclonedx-npm
      
      - name: Run Retire.js (vulnerability scanner)
        run: |
          retire --outputformat json --outputpath retire-results.json || true
      
      - name: Generate SBOM (Software Bill of Materials)
        run: |
          cyclonedx-npm --output-format json --output-file sbom.json
      
      - name: Upload comprehensive scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-security-results
          path: |
            retire-results.json
            sbom.json

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, codeql-analysis, secret-scan]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
      
      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "Generated: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check job results
          echo "## Scan Results" >> security-summary.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- Code Security Scan: ${{ needs.code-security-scan.result }}" >> security-summary.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-summary.md
          echo "- Secret Detection: ${{ needs.secret-scan.result }}" >> security-summary.md
          echo "" >> security-summary.md
          
          if [[ -f "security-audit-results/audit-results.json" ]]; then
            echo "## Dependency Vulnerabilities" >> security-summary.md
            # Parse and display critical findings
            jq -r '.vulnerabilities | length' security-audit-results/audit-results.json > /dev/null 2>&1 && \
            echo "Found $(jq -r '.vulnerabilities | length' security-audit-results/audit-results.json) vulnerabilities" >> security-summary.md || \
            echo "No vulnerabilities detected" >> security-summary.md
          else
            echo "## Dependency Vulnerabilities" >> security-summary.md
            echo "Audit results not available" >> security-summary.md
          fi
          
          cat security-summary.md
      
      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
      
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-summary.md')) {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ðŸ”’ Security Scan Results\n\n${summary}`
              });
            }

  notify-security-issues:
    name: Notify Security Issues
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, codeql-analysis, secret-scan]
    if: failure() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Create security issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `ðŸš¨ Security Scan Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Scan Failure
            
            One or more security scans have failed. Please review the workflow results:
            
            - **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - **Branch**: ${{ github.ref_name }}
            - **Commit**: ${{ github.sha }}
            
            ### Failed Jobs:
            - Dependency Scan: ${{ needs.dependency-scan.result }}
            - Code Security Scan: ${{ needs.code-security-scan.result }}
            - CodeQL Analysis: ${{ needs.codeql-analysis.result }}
            - Secret Detection: ${{ needs.secret-scan.result }}
            
            Please investigate and resolve any security issues found.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'urgent']
            });