name: Dependency Updates

on:
  # Run when Dependabot creates or updates PRs
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  
  # Run weekly to check for outdated dependencies
  schedule:
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC
  
  # Allow manual trigger
  workflow_dispatch:

jobs:
  # Check if this is a Dependabot PR
  check-dependabot:
    name: Check Dependabot PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      is-dependabot: ${{ steps.check.outputs.is-dependabot }}
    
    steps:
      - name: Check if PR is from Dependabot
        id: check
        run: |
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            echo "is-dependabot=true" >> $GITHUB_OUTPUT
          else
            echo "is-dependabot=false" >> $GITHUB_OUTPUT
          fi

  # Enhanced testing for dependency updates
  test-dependencies:
    name: Test Dependency Updates
    runs-on: ubuntu-latest
    needs: check-dependabot
    if: needs.check-dependabot.outputs.is-dependabot == 'true'
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Clean install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install
      
      - name: Run comprehensive tests
        run: |
          npm run lint
          npm run test:coverage
          npm run build
      
      - name: Check for breaking changes
        run: |
          echo "Checking for potential breaking changes..."
          # Add any specific checks for your application
          npm run start &
          sleep 10
          curl -f http://localhost:3000 || exit 1
          pkill -f "next start"

  # Security audit for new dependencies
  security-audit-deps:
    name: Security Audit Dependencies
    runs-on: ubuntu-latest
    needs: check-dependabot
    if: needs.check-dependabot.outputs.is-dependabot == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run security audit
        run: |
          npm audit --audit-level moderate
          npm run security:audit-ci
      
      - name: Run security linting
        run: npm run lint:security

  # Auto-approve and merge Dependabot PRs if tests pass
  auto-merge-dependabot:
    name: Auto-merge Dependabot PR
    runs-on: ubuntu-latest
    needs: [check-dependabot, test-dependencies, security-audit-deps]
    if: |
      needs.check-dependabot.outputs.is-dependabot == 'true' &&
      needs.test-dependencies.result == 'success' &&
      needs.security-audit-deps.result == 'success'
    
    steps:
      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const title = pr.data.title.toLowerCase();
            const isMinorOrPatch = title.includes('bump') && 
              (title.includes('patch') || title.includes('minor'));
            
            return {
              title: pr.data.title,
              isDependency: title.includes('bump'),
              isMinorOrPatch: isMinorOrPatch,
              isSecurity: title.includes('security') || pr.data.body.includes('security')
            };
      
      - name: Auto-approve PR
        if: steps.pr.outputs.isDependency == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE',
              body: '✅ Auto-approved: Dependencies updated successfully and all tests passed!'
            });
      
      - name: Auto-merge minor/patch updates
        if: steps.pr.outputs.isMinorOrPatch == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              commit_title: 'deps: ' + context.payload.pull_request.title,
              merge_method: 'squash'
            });

  # Weekly dependency health check
  dependency-health-check:
    name: Dependency Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Check for outdated dependencies
        run: |
          echo "Checking for outdated dependencies..."
          npm outdated > outdated.txt || true
          cat outdated.txt
      
      - name: Generate dependency report
        run: |
          echo "# Dependency Health Report" > dependency-report.md
          echo "Generated: $(date)" >> dependency-report.md
          echo "" >> dependency-report.md
          
          echo "## Outdated Dependencies" >> dependency-report.md
          if [ -s outdated.txt ]; then
            echo "\`\`\`" >> dependency-report.md
            cat outdated.txt >> dependency-report.md
            echo "\`\`\`" >> dependency-report.md
          else
            echo "All dependencies are up to date! 🎉" >> dependency-report.md
          fi
          echo "" >> dependency-report.md
          
          echo "## Security Audit" >> dependency-report.md
          npm audit --audit-level info --json > audit.json || true
          if [ -s audit.json ]; then
            VULNS=$(jq -r '.metadata.vulnerabilities.total // 0' audit.json)
            if [ "$VULNS" -gt 0 ]; then
              echo "⚠️ Found $VULNS vulnerabilities" >> dependency-report.md
            else
              echo "✅ No security vulnerabilities found" >> dependency-report.md
            fi
          fi
          
          cat dependency-report.md
      
      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-health-report
          path: |
            dependency-report.md
            outdated.txt
            audit.json
      
      - name: Create issue for critical updates
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Check if there are critical security vulnerabilities
            let shouldCreateIssue = false;
            let issueBody = '';
            
            try {
              const auditData = JSON.parse(fs.readFileSync('audit.json', 'utf8'));
              const criticalVulns = auditData.metadata?.vulnerabilities?.critical || 0;
              const highVulns = auditData.metadata?.vulnerabilities?.high || 0;
              
              if (criticalVulns > 0 || highVulns > 0) {
                shouldCreateIssue = true;
                issueBody = `## 🚨 Critical Security Updates Needed
                
                Found ${criticalVulns} critical and ${highVulns} high severity vulnerabilities.
                
                Please run \`npm audit fix\` to resolve these issues.
                
                **Workflow**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                `;
              }
            } catch (error) {
              console.log('Could not parse audit results');
            }
            
            if (shouldCreateIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Critical Security Updates Required - ${new Date().toISOString().split('T')[0]}`,
                body: issueBody,
                labels: ['security', 'dependencies', 'urgent']
              });
            }